# Import necessary modules from tkinter for GUI and base64 for encoding/decoding
from tkinter import *
from tkinter import messagebox
import base64
import os

# Define the function for decryption
def decrypt():
    password = code.get()  # Get the password input from the user

    if password == "1234":  # Check if the password is correct
        screen2 = Toplevel(screen)  # Create a new window for displaying the decrypted message
        screen2.title("decryption")
        screen2.geometry("400x200")
        screen2.configure(bg="#00bd56")  # Set the background color

        message = text1.get(1.0, END)  # Get the text to be decrypted
        decode_message = message.encode("ascii")  # Encode the text to ascii
        base64_bytes = base64.b64decode(decode_message)  # Decode the base64 encoded text
        decrypt = base64_bytes.decode("ascii")  # Convert the bytes back to string

        # Display the decrypted text in the new window
        Label(screen2, text="DECRYPT", font="ariel", fg="white", bg="#00bd56").place(x=10, y=0)
        text2 = Text(screen2, font="Rpbote 10", bg="white", relief=GROOVE, wrap=WORD, bd=0)
        text2.place(x=10, y=40, width=380, height=150)
        text2.insert(END, decrypt)

    elif password == "":  # Check if the password input is empty
        messagebox.showerror("decryption", "Input Password")  # Display error message

    else:  # If the password is incorrect
        messagebox.showerror("decryption", "Invalid Password")  # Display error message

# Define the function for encryption
def encrypt():
    password = code.get()  # Get the password input from the user

    if password == "1234":  # Check if the password is correct
        screen1 = Toplevel(screen)  # Create a new window for displaying the encrypted message
        screen1.title("encryption")
        screen1.geometry("400x200")
        screen1.configure(bg="#ed3833")  # Set the background color

        message = text1.get(1.0, END)  # Get the text to be encrypted
        encode_message = message.encode("ascii")  # Encode the text to ascii
        base64_bytes = base64.b64encode(encode_message)  # Encode the text to base64
        encrypt = base64_bytes.decode("ascii")  # Convert the bytes back to string

        # Display the encrypted text in the new window
        Label(screen1, text="ENCRYPT", font="ariel", fg="white", bg="#ed3833").place(x=10, y=0)
        text2 = Text(screen1, font="Rpbote 10", bg="white", relief=GROOVE, wrap=WORD, bd=0)
        text2.place(x=10, y=40, width=380, height=150)
        text2.insert(END, encrypt)

    elif password == "":  # Check if the password input is empty
        messagebox.showerror("encryption", "Input Password")  # Display error message

    else:  # If the password is incorrect
        messagebox.showerror("encryption", "Invalid Password")  # Display error message

# Define the main screen function
def main_screen():

    # Declare global variables
    global screen
    global code
    global text1

    # Initialize the main window
    screen = Tk()
    screen.geometry("375x398")
    screen.title("Encryption Device")

    # Define a function to reset the input fields
    def reset():
        code.set("")
        text1.delete(1.0, END)

    # Add labels and text fields to the main window
    Label(text="Enter text for encryption and decryption", fg="black", font=("Times New Roman", 13)).place(x=10, y=10)
    text1 = Text(font="Robote 20", bg="white", relief=GROOVE, wrap=WORD, bd=0)
    text1.place(x=10, y=50, width=355, height=100)

    Label(text="Enter the secret key for encryption and decryption", fg="black", font=("Times New Roman", 13)).place(x=10, y=170)

    code = StringVar()
    Entry(textvariable=code, width=19, bd=0, font=("ariel", 25), show="*").place(x=10, y=200)

    # Add buttons for encrypt, decrypt, and reset actions
    Button(text="ENCRYPT", height="2", width=23, bg="#ed3833", fg="white", bd=0, command=encrypt).place(x=10, y=250)
    Button(text="DECRYPT", height="2", width=23, bg="#00bd56", fg="white", bd=0, command=decrypt).place(x=200, y=250)
    Button(text="RESET", height="2", width=50, bg="#1089ff", fg="white", bd=0, command=reset).place(x=10, y=300)

    # Run the main event loop
    screen.mainloop()

# Call the main screen function to start the application
main_screen()
